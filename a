from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from pydantic import BaseModel
import pandas as pd
import matplotlib.pyplot as plt
import io

app = FastAPI()

# Security
security = HTTPBasic()

# Load CSV data
clientes_df = pd.read_csv("clientes_segmentados.csv", index_col="ID cliente")


class Token(BaseModel):
    access_token: str


def obtener_token(credentials: HTTPBasicCredentials = Depends(security)):
    correct_username = "vero"
    correct_password = "1234"
    correct_creds = correct_username == credentials.username and correct_password == credentials.password
    if not correct_creds:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Credenciales incorrectas",
            headers={"WWW-Authenticate": "Basic"},
        )
    return {"access_token": "fake_token"}


@app.get("/clientes/{segmento}")
async def obtener_clientes(segmento: str):
    if segmento.lower() not in ["oro", "plata", "bronce"]:
        raise HTTPException(status_code=404, detail="Segmento no v√°lido")

    clientes_segmento = clientes_df[clientes_df["Cliente"] == segmento.capitalize()]
    clientes = clientes_segmento["Nombre"].tolist()
    cantidad = len(clientes)
    total = len(clientes_df)
    porcentaje = cantidad / total * 100

    return {
        "segmento": segmento.capitalize(),
        "clientes": clientes,
        "cantidad": cantidad,
        "porcentaje": f"{porcentaje:.2f}%"
    }


@app.get("/grafica")
async def obtener_grafica():
    counts = clientes_df["Cliente"].value_counts()
    counts.plot(kind="bar")
    plt.xlabel("Segmento")
    plt.ylabel("Cantidad de clientes")
    plt.title("Cantidad de clientes por segmento")
    plt.xticks(rotation=45)

    # Convert the plot into an image file
    img = io.BytesIO()
    plt.savefig(img, format="png")
    img.seek(0)

    return img


@app.post("/token", response_model=Token)
async def login_for_access_token(credentials: HTTPBasicCredentials = Depends(security)):
    return obtener_token(credentials)


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
